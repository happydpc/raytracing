(define-library (raytrace camera)
  (export make-camera)
  (import (scheme base)
          (scheme inexact)
          (raytrace transformations)
          (raytrace matrix)
          (raytrace ray)
          (raytrace tuple)
          (raytrace canvas))
  (begin
    (define (make-camera hsize vsize field-of-view)
      (define transform (identity-transform))
      (define inv-transform (identity-transform))
      (define half-view (tan (/ field-of-view 2)))
      (define aspect (/ hsize vsize))
      (define half-width (if (< aspect 1) (* half-view aspect) half-view))
      (define half-height (if (< aspect 1) half-view (/ half-view aspect)))
      (define pixel-size (/ (* half-width 2) hsize))

      (define (ray-for-pixel px py)
        (define x-offset (* (+ px 0.5) pixel-size))
        (define y-offset (* (+ py 0.5) pixel-size))
        (define world-x (- half-width x-offset))
        (define world-y (- half-height y-offset))
        (define pixel (m4* inv-transform (point world-x world-y -1)))
        (define origin (m4* inv-transform (point 0 0 0)))
        (ray origin (normalize (tuple-sub pixel origin))))

      (define (render world)
        (define image (canvas hsize vsize))
        (let loop ((x 0) (y 0))
          (cond ((= y vsize) image)
                ((= x hsize) (loop 0 (+ y 1)))
                (else
                  (pixel-set! image x y
                    (world 'color-at
                      (ray-for-pixel x y)))
                  (loop (+ x 1) y)))))

      (define (dispatch m . args)
        (cond ((eq? m 'ray-for-pixel) (ray-for-pixel (car args) (cadr args)))
              ((eq? m 'render) (render (car args)))
              ((eq? m 'hsize) hsize)
              ((eq? m 'vsize) vsize)
              ((eq? m 'field-of-view) field-of-view)
              ((eq? m 'transform) transform)
              ((eq? m 'pixel-size) pixel-size)
              ((eq? m 'set-transform!)
               (set! transform (car args))
               (set! inv-transform (m4-inverse (car args))))
              (else (error "unknown method (camera m ...)" m))))
      dispatch)))

(import (scheme base) (scheme write)
        (raytrace testing)
        (raytrace csg)
        (raytrace ray)
        (raytrace lights)
        (raytrace tuple)
        (raytrace matrix)
        (raytrace transformations)
        (raytrace constants)
        (raytrace shapes))

(test "CSG is created with an operation and two shapes"
  (given (s1 <- (sphere))
         (s2 <- (cube))
         (c <- (csg 'dummy s1 s2)))
  (then ((c 'op) == 'dummy)
        ((c 's1) == s1)
        ((c 's2) == s2)
        ((s1 'parent) == c)
        ((s2 'parent) == c)))

(let ((outline
        (lambda (op lhit inl inr expected)
          (test "Evaluating the rule for a csg operation"
            (given (result <- (op lhit inl inr)))
            (then (result == expected))))))
  (outline csg-union #t #t #t #f)
  (outline csg-union #t #t #f #t)
  (outline csg-union #t #f #t #f)
  (outline csg-union #t #f #f #t)
  (outline csg-union #f #t #t #f)
  (outline csg-union #f #t #f #f)
  (outline csg-union #f #f #t #t)
  (outline csg-union #f #f #f #t)

  (outline csg-intersection #t #t #t #t)
  (outline csg-intersection #t #t #f #f)
  (outline csg-intersection #t #f #t #t)
  (outline csg-intersection #t #f #f #f)
  (outline csg-intersection #f #t #t #t)
  (outline csg-intersection #f #t #f #t)
  (outline csg-intersection #f #f #t #f)
  (outline csg-intersection #f #f #f #f)

  (outline csg-difference #t #t #t #f)
  (outline csg-difference #t #t #f #t)
  (outline csg-difference #t #f #t #f)
  (outline csg-difference #t #f #f #t)
  (outline csg-difference #f #t #t #t)
  (outline csg-difference #f #t #f #t)
  (outline csg-difference #f #f #t #f)
  (outline csg-difference #f #f #f #f))

(let ((outline
        (lambda (op x0 x1)
          (test "Filtering a list of csg-intersections"
            (given (s1 <- (sphere))
                   (s2 <- (cube)))
            (when (c <- (csg op s1 s2))
                  (xs <- (intersections (intersection 1 s1)
                                        (intersection 2 s2)
                                        (intersection 3 s1)
                                        (intersection 4 s2)))
                  (result <- (c 'filter-intersections xs)))
            (then ((length result) == 2)
                  ((car result) == (list-ref xs x0))
                  ((cadr result) == (list-ref xs x1)))))))
  (outline csg-union 0 3)
  (outline csg-intersection 1 2)
  (outline csg-difference 0 1))

(let ((outline
        (lambda (op x0 x1)
          (test "Filtering a list of csg-intersections with groups"
            (given (s1 <- (sphere))
                   (g <- (group))
                   (s2 <- (cube)))
            (when (g 'add-children! s1)
                  (c <- (csg op g s2))
                  (xs <- (intersections (intersection 1 s1)
                                        (intersection 2 s2)
                                        (intersection 3 s1)
                                        (intersection 4 s2)))
                  (result <- (c 'filter-intersections xs)))
            (then ((length result) == 2)
                  ((car result) == (list-ref xs x0))
                  ((cadr result) == (list-ref xs x1)))))))
  (outline csg-union 0 3)
  (outline csg-intersection 1 2)
  (outline csg-difference 0 1))

(let ((outline
        (lambda (op x0 x1)
          (test "Filtering a list of csg-intersections with sub csgs"
            (given (s1 <- (sphere))
                   (s2 <- (sphere))
                   (s3 <- (sphere))
                   (s4 <- (sphere))
                   (c1 <- (csg csg-union s1 s3))
                   (c2 <- (csg csg-union s2 s4)))
            (when (c <- (csg op c1 c2))
                  (xs <- (intersections (intersection 1 s1)
                                        (intersection 2 s2)
                                        (intersection 3 s1)
                                        (intersection 4 s2)))
                  (result <- (c 'filter-intersections xs)))
            (then ((length result) == 2)
                  ((car result) == (list-ref xs x0))
                  ((cadr result) == (list-ref xs x1)))))))
  (outline csg-union 0 3)
  (outline csg-intersection 1 2)
  (outline csg-difference 0 1))

(test "A ray misses a CSG object"
  (given (c <- (csg csg-union (sphere) (cube)))
         (r <- (ray (point 0 2 -5) (vec 0 0 1)))
         (xs <- (c 'local-intersect r)))
  (then (xs == '())))

(test "A ray hits a CSG object"
  (given (s1 <- (sphere))
         (s2 <- (sphere)))
  (when (s2 'set-transform! (translation 0 0 0.5))
        (c <- (csg csg-union s1 s2))
        (r <- (ray (point 0 0 -5) (vec 0 0 1)))
        (xs <- (c 'local-intersect r)))
  (then ((length xs) == 2)
        ((intersection-t (car xs)) == 4)
        ((intersection-object (car xs)) == s1)
        ((intersection-t (cadr xs)) == 6.5)
        ((intersection-object (cadr xs)) == s2)))

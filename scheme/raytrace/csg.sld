(define-library (raytrace csg)
  (export csg csg-union csg-intersection csg-difference)
  (import (scheme base) (scheme write)
          (raytrace constants)
          (raytrace ray)
          (raytrace shapes))
  (begin
    (define (csg op s1 s2)
      (let ((shape (make-shape (csg-geometry op s1 s2))))
        (s1 'set-parent! shape)
        (s2 'set-parent! shape)
        shape))

    (define (csg-union lhit inl inr)
      (or (and lhit (not inr))
          (not (or lhit inl))))

    (define (csg-intersection lhit inl inr)
      (or (and lhit inr)
          (and (not lhit) inl)))

    (define (csg-difference lhit inl inr)
      (or (and lhit (not inr))
          (and (not lhit) inl)))

    (define (csg-geometry op s1 s2)
      (define (filter-xs inl inr xs)
        (if (null? xs)
            '()
            (let* ((lhit (s1 'contains (intersection-object (car xs))))
                   (inl- (if lhit (not inl) inl))
                   (inr- (if lhit inr (not inr))))
              (if (op lhit inl inr)
                  (cons (car xs) (filter-xs inl- inr- (cdr xs)))
                  (filter-xs inl- inr- (cdr xs))))))

      (define (intersect shape ray)
        (filter-xs #f #f (merge-intersections (s1 'intersect ray)
                                              (s2 'intersect ray))))

      (define (dispatch m . args)
        (cond ((eq? m 'intersect) (intersect (car args) (cadr args)))
              ;((eq? m 'normal-at) (normal-at (car args)))
              ;((eq? m 'aabb) (make-aabb -inf.0 +inf.0 (- EPSILON) EPSILON -inf.0 +inf.0))
              ((eq? m 'contains) (or (eq? (car args) s1)
                                     (eq? (car args) s2)))
              ((eq? m 'filter-intersections) (filter-xs #f #f (car args)))
              ((eq? m 'op) op)
              ((eq? m 's1) s1)
              ((eq? m 's2) s2)
              (else (error "unknown method (csg-geometry m ...)" m))))
      dispatch)))

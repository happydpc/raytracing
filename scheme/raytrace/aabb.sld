(define-library (raytrace aabb)
  (export empty-aabb make-aabb aabb-intersect aabb-merge aabb-transform)
  (import (scheme base) (scheme write)
          (raytrace compare)
          (raytrace generic)
          (raytrace constants)
          (raytrace tuple)
          (raytrace matrix)
          (raytrace ray))
  (begin
    (define-record-type <aabb>
      (make-aabb x-min x-max y-min y-max z-min z-max)
      aabb?
      (x-min aabb-xmin)
      (x-max aabb-xmax)
      (y-min aabb-ymin)
      (y-max aabb-ymax)
      (z-min aabb-zmin)
      (z-max aabb-zmax))

    (define (empty-aabb)
      (make-aabb +inf.0 -inf.0 +inf.0 -inf.0 +inf.0 -inf.0))

    (define (aabb-intersect box ray)
      (let* ((origin (ray-origin ray))
             (direction (ray-direction ray))
             (x (check-axis (aabb-xmin box)
                            (aabb-xmax box)
                            (tuple-x origin)
                            (tuple-x direction)))
             (y (check-axis (aabb-ymin box)
                            (aabb-ymax box)
                            (tuple-y origin)
                            (tuple-y direction)))
             (z (check-axis (aabb-zmin box)
                            (aabb-zmax box)
                            (tuple-z origin)
                            (tuple-z direction)))
             (t-min (max (car x) (car y) (car z)))
             (t-max (min (cdr x) (cdr y) (cdr z))))
        (if (< t-max t-min)
            #f
            #t)))

    (define (aabb-merge a b)
      (make-aabb (min (aabb-xmin a) (aabb-xmin b))
                 (max (aabb-xmax a) (aabb-xmax b))
                 (min (aabb-ymin a) (aabb-ymin b))
                 (max (aabb-ymax a) (aabb-ymax b))
                 (min (aabb-zmin a) (aabb-zmin b))
                 (max (aabb-zmax a) (aabb-zmax b))))

    (define (aabb-extend box p)
      (make-aabb (min (aabb-xmin box) (tuple-x p))
                 (max (aabb-xmax box) (tuple-x p))
                 (min (aabb-ymin box) (tuple-y p))
                 (max (aabb-ymax box) (tuple-y p))
                 (min (aabb-zmin box) (tuple-z p))
                 (max (aabb-zmax box) (tuple-z p))))

    (define (aabb-transform box t)
      (let loop ((i 0)
                 (result (empty-aabb)))
        (if (= i 8)
            result
            (loop (+ i 1)
                  (aabb-extend result
                               (m4* t (aabb-corner box i)))))))

    (define (aabb-corner box i)
      (if (< i 4)
          (if (< i 2)
              (if (< i 1)
                  (point (aabb-xmin box) (aabb-ymin box) (aabb-zmin box))
                  (point (aabb-xmin box) (aabb-ymin box) (aabb-zmax box)))
              (if (< i 3)
                  (point (aabb-xmin box) (aabb-ymax box) (aabb-zmin box))
                  (point (aabb-xmin box) (aabb-ymax box) (aabb-zmax box))))
          (if (< i 6)
              (if (< i 5)
                  (point (aabb-xmax box) (aabb-ymin box) (aabb-zmin box))
                  (point (aabb-xmax box) (aabb-ymin box) (aabb-zmax box)))
              (if (< i 7)
                  (point (aabb-xmax box) (aabb-ymax box) (aabb-zmin box))
                  (point (aabb-xmax box) (aabb-ymax box) (aabb-zmax box))))))

    (define (check-axis min max origin direction)
      (if (< (abs direction) EPSILON)
          (cons (* (- min origin) +inf.0)
                (* (- max origin) +inf.0))
          (cons-sort (/ (- min origin) direction)
                     (/ (- max origin) direction))))

    (define (cons-sort a b)
      (if (< b a)
          (cons b a)
          (cons a b)))

    (define (aabb-almost-equal? a b)
      (and (almost= (aabb-xmin a) (aabb-xmin b))
           (almost= (aabb-xmax a) (aabb-xmax b))
           (almost= (aabb-ymin a) (aabb-ymin b))
           (almost= (aabb-ymax a) (aabb-ymax b))
           (almost= (aabb-zmin a) (aabb-zmin b))
           (almost= (aabb-zmax a) (aabb-zmax b))))

    (define (aabb-dispatch method . args)
      (cond ;((eq? 'print method) (apply color-print args))
            ((eq? 'almost-equal? method) (apply aabb-almost-equal? args))))

    (register-type aabb? aabb-dispatch)))
